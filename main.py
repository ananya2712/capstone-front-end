import streamlit as st

import numpy as np
import pandas as pd
import os
import sys
import pickle
import time
import datetime
import matplotlib.pyplot as plt
#import seaborn as sns
from importlib import reload
#from IPython.core.display import display, HTML, clear_output

import multiprocessing

#import torch.nn as nn
#import torch.optim as optim
#from torch.utils.data import Dataset, DataLoader

from sklearn.metrics.pairwise import cosine_similarity
#from sklearn.metrics.pairwise import euclidean_distances
#from sklearn.feature_extraction.text import TfidfVectorizer
#from sklearn.decomposition import TruncatedSVD
import scipy.sparse as sp

weighted = [[3499, 1217, 818, 2449, 343, 296, 356, 1, 2599, 56949],
 [351, 1754, 2065, 5192, 611, 480, 296, 780, 3897, 2420],
 [4925, 3499, 2335, 4673, 2381, 296, 356, 1, 1287, 5349],
 [4925, 3499, 3548, 3165, 3267, 296, 480, 318, 913, 1591],
 [4925, 3499, 2335, 1011, 2077, 296, 480, 318, 8376, 1264],
 [4925, 3499, 2335, 2371, 5077, 296, 480, 1, 502, 1527],
 [4929, 4925, 3499, 612, 3646, 296, 318, 1, 2599, 2116],
 [4925, 4929, 3499, 876, 45361, 296, 318, 480, 4235, 2019],
 [4925, 4929, 4614, 2982, 3908, 480, 2858, 1, 5620, 1682],
 [4932, 4929, 4925, 2466, 3958, 480, 296, 1, 79132, 3186],
 [4933, 4929, 4925, 1011, 5433, 296, 356, 318, 377, 364],
 [4925, 4929, 4933, 2449, 44225, 296, 480, 356, 2144, 3868],
 [4925, 4929, 4933, 2307, 544, 296, 480, 318, 239, 1093],
 [4936, 4925, 4929, 5845, 1018, 296, 318, 356, 2144, 4085],
 [4925, 4929, 4936, 4210, 5553, 296, 480, 318, 1367, 345],
 [4936, 4925, 4929, 2151, 3616, 480, 296, 1, 5577, 107],
 [4939, 4925, 4936, 869, 3256, 480, 296, 1, 5013, 903],
 [4925, 4936, 4929, 304, 4286, 480, 2858, 1, 161, 280],
 [4941, 4936, 4925, 2176, 547, 480, 296, 318, 913, 1287],
 [4936, 4929, 4925, 2202, 5179, 296, 480, 318, 926, 28],
 [4943, 4925, 4936, 476, 84, 296, 480, 318, 410, 4148],
 [4932, 1885, 83, 2203, 998, 296, 480, 318, 51662, 1251],
 [4932, 4933, 4929, 4210, 463, 1, 296, 480, 2817, 45722],
 [4946, 4933, 4929, 4719, 3553, 296, 377, 367, 30707, 3984],
 [4947, 4933, 4929, 2834, 1410, 296, 356, 318, 1091, 58559],
 [4925, 4933, 4947, 5027, 478, 296, 480, 318, 433, 5618],
 [4925, 4929, 4943, 2426, 4551, 296, 480, 318, 6377, 446],
 [4950, 4933, 4947, 45361, 52604, 296, 480, 318, 2324, 81],
 [4951, 4946, 4933, 1601, 5827, 296, 380, 153, 317, 838],
 [4951, 4947, 4929, 1114, 1869, 480, 296, 318, 3764, 28],
 [4950, 4932, 4933, 3345, 2032, 780, 356, 1, 778, 910],
 [4954, 4925, 4929, 245, 929, 296, 318, 480, 265, 65],
 [4955, 4933, 4951, 278, 5800, 480, 296, 318, 4534, 5618],
 [4956, 4932, 4954, 609, 2032, 296, 380, 318, 3097, 4499],
 [4957, 4956, 4932, 39427, 1034, 296, 480, 318, 1500, 2243],
 [4958, 4947, 4939, 1332, 415, 480, 296, 780, 6264, 1248],
 [4936, 4929, 4943, 1034, 1869, 480, 780, 1, 8376, 1500],
 [4960, 4954, 4956, 1063, 713, 296, 480, 318, 64, 3186],
 [4936, 4941, 4929, 61, 3184, 296, 480, 1, 5502, 1057],
 [4957, 4956, 4932, 4674, 4521, 480, 296, 1, 1347, 3869],
 [4963, 4957, 4956, 713, 2190, 480, 1, 296, 317, 783],
 [4957, 4963, 4956, 3427, 903, 296, 480, 318, 1569, 1231],
 [4933, 4947, 4929, 2386, 779, 296, 356, 480, 6537, 6874],
 [4960, 4954, 4956, 548, 52604, 480, 296, 1, 3863, 81834],
 [4967, 4929, 4936, 2489, 2914, 480, 1, 780, 64, 2186],
 [4957, 4956, 4955, 5067, 2195, 296, 480, 318, 247, 1204],
 [4960, 4954, 4925, 2045, 2077, 296, 480, 318, 2023, 2355],
 [4970, 4951, 4946, 687, 3853, 296, 480, 318, 1274, 466],
 [4971, 4946, 4933, 5642, 31420, 480, 296, 318, 2401, 903],
 [4929, 4954, 4925, 601, 726, 296, 356, 480, 2401, 8972],
 [4973, 4946, 4932, 2769, 929, 296, 480, 318, 40815, 551],
 [4974, 4936, 4941, 1806, 3991, 296, 480, 318, 710, 707],
 [4975, 4946, 4933, 304, 5534, 480, 2858, 1, 2023, 1091],
 [4946, 4933, 4975, 5580, 8783, 296, 377, 367, 2599, 2355],
 [4932, 4970, 4946, 1034, 2769, 480, 296, 1, 613, 1057],
 [4978, 4975, 4946, 297, 254, 296, 318, 480, 3107, 2599],
 [4979, 4936, 4941, 2967, 2554, 296, 480, 318, 1224, 59315],
 [4980, 4975, 4978, 53129, 4177, 296, 377, 356, 3269, 1537],
 [4955, 4951, 4978, 449, 2834, 480, 296, 1, 1293, 8810],
 [4982, 4960, 4954, 241, 27684, 480, 296, 1, 1029, 3107],
 [4957, 4975, 4978, 4286, 984, 296, 356, 480, 784, 4034],
 [4956, 4980, 4975, 2923, 3240, 480, 296, 1, 4534, 2019],
 [4985, 4980, 4933, 266, 1178, 480, 296, 1, 44195, 3054],
 [4925, 4970, 4954, 457, 2182, 296, 480, 318, 44665, 1223],
 [4987, 4975, 4932, 4720, 338, 480, 2858, 1, 265, 56775],
 [4925, 4929, 4951, 255, 5067, 480, 296, 318, 2359, 1914],
 [4989, 4933, 4978, 44399, 828, 296, 480, 318, 8784, 800],
 [4990, 4955, 4950, 2151, 255, 296, 480, 318, 3360, 954],
 [4991, 4980, 4975, 44665, 3370, 296, 380, 377, 3535, 378],
 [4992, 4957, 4991, 8860, 5968, 296, 480, 318, 3764, 4262],
 [4993, 4978, 4975, 2831, 3853, 480, 1, 780, 106100, 1100],
 [4994, 4992, 4963, 287, 2385, 296, 318, 480, 48774, 2422],
 [4995, 4991, 4980, 4595, 4505, 296, 1, 480, 552, 231],
 [4936, 4929, 4925, 2250, 2547, 480, 1, 1198, 1150, 125],
 [4960, 4929, 4970, 4868, 869, 296, 480, 318, 903, 2186],
 [4998, 4992, 4991, 4814, 5960, 296, 480, 1, 194, 3764],
 [4933, 4978, 4951, 586, 3157, 296, 480, 1, 194, 5246],
 [4978, 4955, 4933, 13, 5452, 296, 480, 356, 1150, 2301],
 [4985, 4995, 4980, 4672, 294, 480, 296, 1, 833, 6331],
 [5002, 4936, 4974, 5067, 5857, 480, 296, 1, 538, 1747],
 [5003, 4957, 4998, 4727, 48394, 480, 296, 318, 265, 158],
 [5004, 4975, 4978, 3912, 2190, 780, 260, 1, 1527, 4034],
 [4982, 4954, 4960, 2383, 5642, 296, 480, 318, 6383, 32587],
 [4943, 4936, 4925, 258, 2162, 296, 480, 318, 246, 1954],
 [4925, 4929, 4936, 6793, 8934, 480, 1, 296, 41, 8784],
 [5008, 4929, 4967, 2182, 66, 480, 780, 1, 1175, 2817],
 [5009, 4991, 4951, 4238, 5179, 296, 480, 318, 4270, 2300],
 [5010, 4992, 4995, 2250, 713, 296, 356, 318, 41, 2976],
 [4929, 4947, 4970, 4238, 2183, 480, 780, 1, 750, 567],
 [5012, 4933, 4947, 1538, 44399, 296, 318, 356, 1049, 1251],
 [5013, 4978, 5004, 5845, 1750, 296, 377, 367, 33794, 41566],
 [5014, 4998, 4985, 713, 4606, 480, 1, 2858, 7361, 1091],
 [5015, 4995, 4955, 2559, 2162, 296, 480, 318, 48, 538],
 [5016, 4943, 5002, 4749, 828, 296, 480, 318, 27721, 2843],
 [5017, 4980, 4982, 209, 2684, 480, 296, 318, 3863, 4246],
 [5013, 5004, 4933, 3741, 5442, 1198, 260, 2571, 3698, 2081],
 [4947, 4929, 4936, 4162, 447, 480, 296, 1, 3543, 6365],
 [5020, 4982, 5012, 2095, 609, 1, 296, 356, 446, 4246],
 [5021, 4936, 5002, 2126, 42, 480, 296, 1, 1132, 2817],
 [4960, 4982, 4980, 547, 5593, 296, 480, 318, 688, 2420],
 [5023, 4960, 4982, 548, 3710, 296, 380, 480, 3087, 428],
 [5024, 4980, 4956, 1742, 113453, 296, 480, 318, 1005, 1296],
 [5025, 4933, 4946, 34530, 287, 780, 480, 1, 81562, 2722],
 [5026, 5013, 4978, 4286, 254, 1244, 1188, 14, 1876, 4246],
 [5027, 5021, 4936, 2389, 48780, 296, 480, 1, 3752, 4015],
 [4957, 4992, 4998, 2126, 1744, 480, 780, 1, 647, 3527],
 [5029, 4978, 4995, 238, 586, 296, 1, 780, 8810, 272],
 [5030, 5015, 4991, 2110, 36509, 296, 318, 480, 277, 194],
 [4975, 4980, 4978, 2914, 476, 296, 356, 318, 412, 125],
 [5021, 4936, 4925, 209, 498, 296, 480, 318, 6378, 446],
 [5033, 4951, 4978, 2923, 603, 480, 1, 296, 1552, 5572],
 [5026, 5013, 5012, 573, 2062, 296, 480, 318, 3763, 898],
 [4936, 4967, 5002, 573, 4631, 480, 2858, 1, 616, 969],
 [5036, 4936, 4929, 2831, 209, 480, 2858, 296, 1283, 4447],
 [5012, 4947, 5026, 5027, 3946, 296, 480, 318, 6867, 54001],
 [5038, 5013, 4978, 930, 2389, 377, 296, 367, 1367, 158],
 [5039, 5027, 5036, 2180, 2535, 296, 480, 318, 288, 28],
 [5040, 4985, 5013, 476, 5186, 480, 1, 296, 3869, 3213],
 [5021, 4936, 4979, 4750, 2162, 296, 480, 318, 3745, 458],
 [5021, 5036, 4936, 2210, 5179, 296, 480, 318, 239, 1274],
 [5030, 4992, 4991, 2884, 3240, 296, 480, 356, 6870, 51662],
 [4995, 4992, 4957, 706, 1058, 480, 2858, 1, 168, 4639],
 [5021, 4936, 4967, 4648, 1432, 480, 296, 318, 79132, 4974],
 [5046, 4980, 4991, 930, 159, 296, 356, 377, 50872, 849],
 [5047, 5033, 5038, 1742, 5593, 480, 780, 1, 2324, 3751],
 [5048, 5027, 5039, 81, 1661, 296, 480, 318, 3697, 3980],
 [5049, 4932, 4975, 2184, 36509, 296, 480, 318, 1223, 1093],
 [4954, 4925, 5012, 521, 1608, 296, 480, 318, 446, 5349],
 [5051, 4933, 5026, 2884, 449, 296, 356, 480, 8910, 3793],
 [5012, 5026, 4929, 4505, 5534, 296, 377, 380, 1293, 5377],
 [5053, 4980, 5046, 5857, 4268, 296, 377, 356, 3755, 2987],
 [5054, 5013, 5038, 209, 184, 296, 377, 318, 1275, 30707],
 [5055, 5026, 5013, 1058, 2190, 2571, 260, 1, 2599, 410],
 [5054, 4946, 4975, 1814, 1058, 296, 356, 593, 2599, 3717],
 [4995, 4991, 5053, 54, 2095, 296, 318, 480, 3421, 2019],
 [4995, 4992, 5053, 6464, 641, 1, 780, 296, 1244, 5669],
 [4980, 4975, 5038, 2537, 2152, 296, 356, 367, 6711, 308],
 [5060, 4973, 5053, 1219, 5692, 480, 1, 296, 1377, 849],
 [5061, 5023, 4985, 1174, 2923, 480, 296, 318, 365, 1591],
 [5062, 5013, 4980, 4837, 554, 296, 380, 318, 1231, 2294],
 [5063, 4929, 4946, 478, 2726, 296, 480, 318, 7147, 849],
 [5064, 4955, 5033, 4521, 2190, 296, 480, 318, 32587, 784],
 [5065, 5049, 5063, 431, 81, 296, 480, 318, 1274, 1690],
 [5066, 5055, 5023, 4504, 2385, 296, 480, 1, 969, 707],
 [5067, 4929, 4970, 1610, 2535, 480, 1, 2858, 1593, 1339],
 [5064, 4990, 4958, 2054, 754, 296, 480, 318, 3977, 3671],
 [5012, 5062, 5026, 3994, 1370, 296, 356, 377, 7502, 230],
 [5026, 5013, 5038, 449, 1410, 480, 296, 780, 7361, 1104],
 [4936, 5002, 5036, 27684, 7345, 296, 480, 318, 247, 107],
 [5066, 5054, 5023, 575, 258, 480, 1, 296, 585, 468],
 [4946, 4978, 5026, 4719, 165, 296, 480, 318, 1302, 2406],
 [5053, 5023, 4980, 2037, 5480, 296, 318, 356, 3984, 315],
 [4929, 5012, 4925, 4162, 287, 296, 318, 356, 85, 2702],
 [4957, 4992, 5053, 996, 5893, 296, 356, 1, 1235, 59615],
 [5077, 4963, 4957, 876, 707, 296, 480, 318, 3548, 5747],
 [5026, 4946, 4978, 498, 4549, 2174, 1291, 1101, 11, 539],
 [5012, 5026, 4933, 4650, 2523, 296, 356, 480, 6365, 926],
 [5080, 5026, 5013, 2371, 4663, 296, 380, 377, 1747, 2313],
 [4943, 5048, 4936, 5452, 1750, 296, 480, 318, 592, 277],
 [4995, 5038, 5013, 3568, 447, 153, 292, 296, 4235, 275],
 [5012, 4933, 4925, 44731, 251, 480, 1, 2858, 345, 4973],
 [4925, 4936, 4929, 27005, 8207, 296, 1, 356, 5481, 911],
 [5010, 5077, 4992, 3764, 1608, 296, 480, 356, 41569, 48394],
 [4954, 4925, 5012, 3763, 479, 296, 318, 380, 5349, 5618],
 [4951, 4947, 5051, 2040, 126, 296, 380, 153, 4424, 1100],
 [5064, 5051, 5033, 2953, 609, 480, 296, 1, 14, 2144],
 [4932, 5049, 4987, 2077, 238, 480, 1, 780, 8949, 4865],
 [5012, 4933, 5051, 928, 74458, 296, 1, 780, 2717, 2167],
 [4936, 5021, 4929, 3501, 6834, 480, 296, 318, 292, 39],
 [5092, 5004, 4978, 4620, 913, 296, 1, 480, 85, 3396],
 [5093, 5008, 5067, 6910, 3709, 296, 480, 356, 1377, 2976],
 [5094, 5080, 4951, 996, 2208, 296, 480, 318, 3702, 538],
 [4943, 4925, 4954, 886, 548, 480, 296, 318, 1954, 2414],
 [5096, 5047, 5015, 3401, 5480, 480, 296, 780, 3751, 419],
 [4992, 5010, 4957, 6639, 66, 296, 318, 480, 5246, 28],
 [4974, 5021, 4979, 87, 609, 480, 296, 780, 441, 969],
 [5051, 4958, 4947, 8860, 806, 296, 480, 1, 1194, 3751],
 [5100, 4980, 5014, 278, 1174, 2858, 480, 780, 2492, 6934],
 [4957, 5077, 5003, 586, 2399, 480, 296, 780, 1049, 1175],
 [5102, 5077, 3115, 5433, 2537, 480, 296, 780, 1747, 3863],
 [5103, 5010, 4992, 5362, 1474, 296, 480, 356, 446, 1747],
 [5051, 4933, 5012, 3184, 227, 480, 1, 2858, 209, 858],
 [5105, 4957, 4992, 876, 4354, 296, 480, 318, 616, 1088],
 [5106, 5080, 5038, 601, 498, 296, 380, 153, 3623, 2396],
 [5107, 5060, 5105, 1834, 2726, 296, 480, 318, 2301, 926],
 [5020, 4982, 5023, 6624, 54278, 296, 480, 318, 230, 79132],
 [5100, 5066, 5023, 384, 1610, 480, 296, 1, 412, 144],
 [5110, 4951, 4925, 6955, 4719, 296, 318, 480, 540, 155],
 [5111, 5013, 5054, 631, 2967, 296, 480, 318, 4238, 3984],
 [4947, 5012, 5051, 1427, 2182, 480, 1, 1198, 4975, 2116],
 [5009, 5033, 4951, 3553, 81, 480, 2858, 1, 2401, 1267],
 [4957, 4992, 5105, 415, 2186, 780, 480, 296, 3421, 230],
 [4925, 4943, 4939, 5425, 5208, 480, 780, 1, 2413, 1275],
 [5051, 4989, 4933, 2091, 5452, 296, 780, 480, 1608, 1283],
 [5051, 4978, 4933, 3298, 6795, 480, 1, 780, 1431, 59315],
 [5053, 4980, 4975, 1595, 1015, 296, 1, 480, 3481, 4270],
 [5049, 4932, 4991, 27773, 1370, 480, 2858, 318, 2273, 2712],
 [5120, 4951, 5110, 904, 4629, 480, 780, 1, 30707, 33166],
 [5010, 4956, 5014, 3944, 1600, 480, 780, 1, 3157, 5377],
 [4954, 4960, 5012, 547, 420, 296, 318, 480, 381, 172]]

content_recs = [[3499, 1217, 818, 2335, 42, 272, 4223, 4614, 1342, 2670],
 [351, 1754, 2065, 2049, 2042, 2024, 1810, 1799, 1753, 1670],
 [4925, 3499, 2335, 1217, 818, 272, 4223, 42, 4614, 368],
 [4925, 3499, 3548, 3831, 3792, 3597, 3596, 3578, 3572, 3507],
 [4925, 3499, 2335, 1217, 818, 272, 4223, 42, 368, 2469],
 [4925, 3499, 2335, 1217, 818, 272, 4223, 42, 368, 3739],
 [4929, 4925, 3499, 818, 2335, 1217, 4614, 4223, 42, 272],
 [4925, 4929, 3499, 818, 2335, 1217, 2670, 1342, 3810, 3264],
 [4925, 4929, 4614, 295, 3499, 3950, 3481, 3448, 3503, 3978],
 [4932, 4929, 4925, 1904, 818, 1217, 2335, 4614, 3499, 3873],
 [4933, 4929, 4925, 4932, 818, 2335, 1217, 1904, 4614, 3499],
 [4925, 4929, 4933, 3499, 1217, 818, 2335, 4932, 1342, 2670],
 [4925, 4929, 4933, 4932, 818, 2335, 1217, 3499, 4614, 4223],
 [4936, 4925, 4929, 4933, 4932, 3499, 818, 2335, 1217, 4223],
 [4925, 4929, 4936, 4933, 4932, 3499, 4223, 42, 272, 818],
 [4936, 4925, 4929, 4933, 818, 1217, 2335, 3499, 2863, 2871],
 [4939, 4925, 4936, 4929, 4933, 3301, 3591, 3476, 3449, 3394],
 [4925, 4936, 4929, 4939, 4933, 4932, 3499, 818, 2335, 1217],
 [4941, 4936, 4925, 4929, 4939, 4933, 1217, 818, 2335, 3499],
 [4936, 4929, 4925, 4941, 4933, 4939, 4932, 3243, 3572, 3448],
 [4943, 4925, 4936, 4941, 4929, 4933, 4939, 4932, 1750, 1831],
 [4932, 1885, 83, 1999, 1994, 580, 2053, 2168, 2169, 2491],
 [4932, 4933, 4929, 4925, 4936, 4943, 4941, 4939, 4614, 818],
 [4946, 4933, 4929, 4932, 4925, 4936, 4943, 4939, 4941, 818],
 [4947, 4933, 4929, 4925, 4946, 4936, 4939, 4943, 4932, 4941],
 [4925, 4933, 4947, 4929, 4936, 4946, 4943, 4941, 4939, 4932],
 [4925, 4929, 4943, 4936, 4933, 4947, 4946, 4941, 4932, 4939],
 [4950, 4933, 4947, 4946, 4925, 4932, 4929, 4936, 4939, 4941],
 [4951, 4946, 4933, 4947, 4929, 4925, 4932, 4936, 4950, 4939],
 [4951, 4947, 4929, 4933, 4946, 4925, 4936, 4950, 4939, 4932],
 [4950, 4932, 4933, 4946, 4951, 4947, 4929, 4925, 4936, 4943],
 [4954, 4925, 4929, 4933, 4947, 4951, 4936, 4943, 4946, 4941],
 [4955, 4933, 4951, 4946, 4947, 4950, 4954, 4929, 4932, 4925],
 [4956, 4932, 4954, 4946, 4933, 4950, 4951, 4955, 4947, 4929],
 [4957, 4956, 4932, 4955, 4950, 4946, 4933, 4951, 4947, 4954],
 [4958, 4947, 4939, 4925, 4933, 4951, 4929, 4955, 4950, 4946],
 [4936, 4929, 4943, 4941, 4925, 4939, 4947, 4946, 4933, 4954],
 [4960, 4954, 4956, 4933, 4951, 4925, 4929, 4947, 4946, 4950],
 [4936, 4941, 4929, 4943, 4925, 4954, 4951, 4939, 4960, 4947],
 [4957, 4956, 4932, 4946, 4950, 4955, 4960, 4951, 4933, 4947],
 [4963, 4957, 4956, 4932, 4960, 4946, 4950, 4955, 4933, 4951],
 [4957, 4963, 4956, 4932, 4950, 4946, 4955, 4960, 4933, 4951],
 [4933, 4947, 4929, 4951, 4925, 4955, 4946, 4960, 4954, 4936],
 [4960, 4954, 4956, 4933, 4925, 4950, 4947, 4951, 4946, 4929],
 [4967, 4929, 4936, 4925, 4946, 4933, 4947, 4951, 4941, 4943],
 [4957, 4956, 4955, 4960, 4950, 4933, 4946, 4951, 4963, 4932],
 [4960, 4954, 4925, 4929, 4936, 4933, 4943, 4951, 4947, 4946],
 [4970, 4951, 4946, 4929, 4960, 4954, 4933, 4925, 4947, 4956],
 [4971, 4946, 4933, 4947, 4951, 4960, 4932, 4929, 4970, 4950],
 [4929, 4954, 4925, 4960, 4970, 4936, 4947, 4943, 4933, 4946],
 [4973, 4946, 4932, 4971, 4957, 4956, 4933, 4951, 4970, 4960],
 [4974, 4936, 4941, 4954, 4939, 4925, 4929, 4960, 4943, 4967],
 [4975, 4946, 4933, 4960, 4973, 4951, 4956, 4932, 4971, 4947],
 [4946, 4933, 4975, 4951, 4929, 4947, 4970, 4960, 4925, 4973],
 [4932, 4970, 4946, 4975, 4973, 4960, 4929, 4933, 4956, 4951],
 [4978, 4975, 4946, 4933, 4951, 4947, 4960, 4971, 4955, 4929],
 [4979, 4936, 4941, 4974, 4939, 4943, 4925, 4929, 4967, 4954],
 [4980, 4975, 4978, 4956, 4960, 4946, 4933, 4973, 4970, 4951],
 [4955, 4951, 4978, 4958, 4933, 4947, 4946, 4975, 4950, 4973],
 [4982, 4960, 4954, 4980, 4970, 4975, 4929, 4933, 4956, 4925],
 [4957, 4975, 4978, 4980, 4973, 4956, 4955, 4963, 4946, 4932],
 [4956, 4980, 4975, 4960, 4982, 4954, 4978, 4963, 4925, 4933],
 [4985, 4980, 4933, 4978, 4975, 4947, 4982, 4946, 4960, 4956],
 [4925, 4970, 4954, 4929, 4943, 4936, 4941, 4951, 4939, 4947],
 [4987, 4975, 4932, 4980, 4956, 4946, 4978, 4973, 4971, 4960],
 [4925, 4929, 4951, 4947, 4970, 4936, 4933, 4954, 4978, 4946],
 [4989, 4933, 4978, 4946, 4985, 4971, 4980, 4975, 4947, 4960],
 [4990, 4955, 4950, 4957, 4978, 4951, 4933, 4980, 4975, 4956],
 [4991, 4980, 4975, 4973, 4956, 4978, 4946, 4932, 4957, 4960],
 [4992, 4957, 4991, 4956, 4975, 4963, 4980, 4973, 4987, 4978],
 [4993, 4978, 4975, 4950, 4960, 4947, 4951, 4980, 4992, 4991],
 [4994, 4992, 4963, 4957, 4956, 4975, 4980, 4991, 4987, 4978],
 [4995, 4991, 4980, 4978, 4975, 4956, 4992, 4960, 4955, 4933],
 [4936, 4929, 4925, 4967, 4947, 4933, 4954, 4941, 4989, 4951],
 [4960, 4929, 4970, 4951, 4954, 4975, 4946, 4978, 4925, 4982],
 [4998, 4992, 4991, 4995, 4980, 4973, 4994, 4956, 4957, 4975],
 [4933, 4978, 4951, 4947, 4995, 4946, 4975, 4955, 4993, 4989],
 [4978, 4955, 4933, 4989, 4995, 4975, 4980, 4946, 4971, 4998],
 [4985, 4995, 4980, 4955, 4978, 4960, 4956, 4975, 4991, 4993],
 [5002, 4936, 4974, 4941, 4979, 4929, 4967, 4925, 4943, 4954],
 [5003, 4957, 4998, 4956, 4992, 4963, 4991, 4995, 4994, 4980],
 [5004, 4975, 4978, 4995, 4980, 4933, 4991, 4946, 4985, 4960],
 [4982, 4954, 4960, 4985, 4980, 4925, 4947, 4933, 4975, 5004],
 [4943, 4936, 4925, 5002, 4941, 4974, 4979, 4954, 4939, 4982],
 [4925, 4929, 4936, 4939, 4947, 4967, 4954, 4933, 4941, 4943],
 [5008, 4929, 4967, 4936, 4970, 4925, 4939, 4943, 4947, 4951],
 [5009, 4991, 4951, 4973, 4946, 4970, 4932, 4975, 4980, 4995],
 [5010, 4992, 4995, 4991, 4956, 4980, 4998, 4957, 5004, 4975],
 [4929, 4947, 4970, 4946, 4925, 4933, 4951, 4982, 4978, 4980],
 [5012, 4933, 4947, 4978, 4925, 4929, 4960, 4954, 5004, 4951],
 [5013, 4978, 5004, 4975, 4980, 4933, 4995, 4946, 5012, 4951],
 [5014, 4998, 4985, 4956, 4980, 5010, 4992, 4995, 5004, 4994],
 [5015, 4995, 4955, 4957, 5010, 4991, 4992, 5004, 4990, 4998],
 [5016, 4943, 5002, 4925, 4979, 4936, 4929, 4954, 4941, 4970],
 [5017, 4980, 4982, 4956, 4975, 4932, 5013, 4946, 4995, 5010],
 [5013, 5004, 4933, 4978, 5012, 4995, 4960, 4975, 4980, 4947],
 [4947, 4929, 4936, 5012, 4967, 4925, 4933, 4939, 4978, 4979],
 [5020, 4982, 5012, 4933, 4960, 4954, 4929, 5013, 4947, 4989],
 [5021, 4936, 5002, 4941, 4979, 4943, 4929, 4967, 4925, 4974],
 [4960, 4982, 4980, 4975, 4970, 4954, 5013, 4951, 5012, 4933],
 [5023, 4960, 4982, 4980, 5013, 5020, 4975, 5004, 5012, 4978],
 [5024, 4980, 4956, 4960, 5023, 4975, 4982, 4995, 5013, 5004],
 [5025, 4933, 4946, 5013, 4951, 4978, 5012, 4980, 5004, 4970],
 [5026, 5013, 4978, 4933, 5012, 5004, 4947, 4975, 4946, 4951],
 [5027, 5021, 4936, 4967, 5008, 4941, 4929, 4943, 5002, 4925],
 [4957, 4992, 4998, 5010, 4973, 4991, 4963, 4994, 4956, 5003],
 [5029, 4978, 4995, 5004, 5013, 4980, 4933, 5026, 4998, 4975],
 [5030, 5015, 4991, 4995, 5010, 4955, 4992, 4973, 5004, 4975],
 [4975, 4980, 4978, 5013, 5004, 4991, 4946, 4995, 4932, 5026],
 [5021, 4936, 4925, 4929, 5002, 4967, 4979, 4941, 5027, 5008],
 [5033, 4951, 4978, 5026, 4946, 5013, 5004, 4975, 4933, 4991],
 [5026, 5013, 5012, 4933, 4980, 4982, 4947, 4960, 4925, 4970],
 [4936, 4967, 5002, 5021, 4929, 4979, 5008, 4939, 4974, 4925],
 [5036, 4936, 4929, 5021, 4941, 4925, 4967, 5002, 4939, 5012],
 [5012, 4947, 5026, 5020, 4933, 5013, 4929, 4978, 5023, 4925],
 [5038, 5013, 4978, 5004, 4975, 5026, 4946, 4980, 4995, 4933],
 [5039, 5027, 5036, 5021, 4936, 4929, 5008, 4941, 4925, 4967],
 [5040, 4985, 5013, 4947, 5012, 4933, 5026, 5020, 5004, 4978],
 [5021, 4936, 4979, 5002, 4974, 5036, 4941, 5039, 4925, 4929],
 [5021, 5036, 4936, 5002, 5039, 4974, 4929, 4925, 4967, 4941],
 [5030, 4992, 4991, 4957, 5015, 4995, 4973, 5038, 5010, 4975],
 [4995, 4992, 4957, 5015, 5010, 4994, 4991, 5004, 5038, 5029],
 [5021, 4936, 4967, 5002, 4979, 4929, 5036, 5039, 5008, 5027],
 [5046, 4980, 4991, 4975, 5038, 4995, 5013, 5010, 5004, 4978],
 [5047, 5033, 5038, 4978, 4946, 5004, 5026, 4975, 4933, 5013],
 [5048, 5027, 5039, 4941, 4943, 4936, 5036, 5021, 5008, 4925],
 [5049, 4932, 4975, 4970, 4987, 4980, 4991, 5046, 4946, 5038],
 [4954, 4925, 5012, 4929, 4970, 5025, 5026, 4933, 4947, 4960],
 [5051, 4933, 5026, 4978, 5012, 5013, 4947, 5038, 5004, 4946],
 [5012, 5026, 4929, 5051, 4933, 4925, 4960, 4954, 4951, 4947],
 [5053, 4980, 5046, 4975, 4995, 5038, 4991, 5004, 5013, 4978],
 [5054, 5013, 5038, 5026, 4978, 4980, 4975, 5004, 4946, 5053],
 [5055, 5026, 5013, 5012, 5051, 4933, 5054, 4978, 5038, 5004],
 [5054, 4946, 4975, 4980, 5026, 5013, 5038, 5046, 4978, 5055],
 [4995, 4991, 5053, 5038, 4975, 5004, 4992, 4978, 5013, 5046],
 [4995, 4992, 5053, 4994, 4957, 4998, 5015, 4991, 5004, 5010],
 [4980, 4975, 5038, 5054, 5046, 5013, 5053, 4946, 4978, 5004],
 [5060, 4973, 5053, 4946, 4991, 5046, 5038, 4975, 4932, 4992],
 [5061, 5023, 4985, 5040, 4925, 4982, 5020, 5012, 5014, 5055],
 [5062, 5013, 4980, 4933, 5054, 5026, 5025, 5055, 5038, 5012],
 [5063, 4929, 4946, 5054, 4975, 5062, 5023, 5049, 5026, 4980],
 [5064, 4955, 5033, 4990, 5047, 4958, 4951, 5051, 4933, 4947],
 [5065, 5049, 5063, 4929, 4975, 4932, 5026, 5012, 4967, 5062],
 [5066, 5055, 5023, 4960, 5026, 5012, 4982, 4929, 5062, 4925],
 [5067, 4929, 4970, 4951, 4946, 5026, 5012, 4925, 4947, 5025],
 [5064, 4990, 4958, 4955, 5015, 4950, 5051, 5033, 4933, 5047],
 [5012, 5062, 5026, 5054, 4933, 5013, 5055, 4978, 4980, 5051],
 [5026, 5013, 5038, 5055, 4978, 5054, 4951, 4975, 5004, 5012],
 [4936, 5002, 5036, 5067, 5021, 4929, 4925, 4954, 4941, 4951],
 [5066, 5054, 5023, 4946, 4978, 5026, 5013, 5051, 5038, 5055],
 [4946, 4978, 5026, 5013, 5054, 5038, 5062, 4975, 5012, 4933],
 [5053, 5023, 4980, 5024, 5054, 4975, 5046, 4956, 5017, 5013],
 [4929, 5012, 4925, 5026, 5055, 4954, 4951, 4970, 4933, 4947],
 [4957, 4992, 5053, 4995, 5010, 4991, 4998, 5046, 4994, 4956],
 [5077, 4963, 4957, 4998, 4992, 5010, 4994, 5053, 4956, 5014],
 [5026, 4946, 4978, 5054, 5038, 4951, 4933, 5051, 5013, 5055],
 [5012, 5026, 4933, 5055, 5051, 4947, 5013, 4978, 5066, 5062],
 [5080, 5026, 5013, 5054, 4975, 5038, 4960, 5062, 5055, 4951],
 [4943, 5048, 4936, 5021, 5002, 4925, 4941, 4954, 5016, 4979],
 [4995, 5038, 5013, 4978, 4951, 5026, 5004, 5055, 5051, 4955],
 [5012, 4933, 4925, 5025, 5062, 5051, 4929, 5013, 4954, 5026],
 [4925, 4936, 4929, 4954, 5012, 5066, 5055, 4947, 5020, 5026],
 [5010, 5077, 4992, 4957, 4956, 4963, 5053, 5046, 5003, 4991],
 [4954, 4925, 5012, 4936, 4941, 5055, 4929, 4933, 4943, 4960],
 [4951, 4947, 5051, 4933, 5026, 5033, 5012, 5055, 4929, 5067],
 [5064, 5051, 5033, 4955, 5047, 5029, 4933, 4958, 4947, 4978],
 [4932, 5049, 4987, 5065, 4975, 5053, 5080, 5054, 4960, 5063],
 [5012, 4933, 5051, 5026, 4947, 5055, 5062, 5013, 4978, 5054],
 [4936, 5021, 4929, 5036, 4925, 5066, 4941, 4967, 5020, 5012],
 [5092, 5004, 4978, 5038, 5013, 5053, 4980, 4995, 4975, 5054],
 [5093, 5008, 5067, 4970, 4951, 4929, 4946, 5009, 5039, 4947],
 [5094, 5080, 4951, 5038, 5004, 5013, 4975, 4978, 4970, 5026],
 [4943, 4925, 4954, 5048, 4941, 4936, 5055, 5012, 5062, 4970],
 [5096, 5047, 5015, 4971, 4994, 4950, 5038, 5004, 4955, 4957],
 [4992, 5010, 4957, 4963, 4991, 5053, 5046, 4994, 4987, 4973],
 [4974, 5021, 4979, 4936, 5002, 4967, 5020, 4941, 4929, 4925],
 [5051, 4958, 4947, 5064, 5033, 4933, 5012, 4978, 5096, 5047],
 [5100, 4980, 5014, 5046, 5024, 5023, 5010, 4956, 4998, 5092],
 [4957, 5077, 5003, 4992, 1885, 4963, 5010, 83, 3948, 1396],
 [5102, 5077, 3115, 1935, 3355, 4388, 599, 1426, 3071, 4963],
 [5103, 5010, 4992, 5100, 5053, 4998, 4956, 5092, 4995, 5024],
 [5051, 4933, 5012, 4989, 4947, 4978, 5026, 5096, 5047, 5038],
 [5105, 4957, 4992, 4991, 5010, 4998, 4994, 5015, 4995, 5053],
 [5106, 5080, 5038, 5053, 5013, 4975, 4995, 5004, 4980, 4960],
 [5107, 5060, 5105, 5009, 4957, 4973, 4991, 4992, 5030, 4932],
 [5020, 4982, 5023, 5066, 4960, 4954, 4936, 5012, 5063, 4929],
 [5100, 5066, 5023, 4982, 4985, 5061, 5062, 4980, 5017, 5014],
 [5110, 4951, 4925, 5012, 4954, 4929, 5067, 4970, 5055, 5036],
 [5111, 5013, 5054, 5038, 4978, 5026, 5004, 4975, 4980, 5092],
 [4947, 5012, 5051, 4933, 4925, 5026, 4929, 4954, 5055, 5110],
 [5009, 5033, 4951, 5110, 5067, 5025, 4970, 4946, 5047, 5026],
 [4957, 4992, 5105, 4963, 4956, 5010, 4991, 4998, 5053, 4994],
 [4925, 4943, 4939, 4936, 4929, 4947, 4954, 5066, 4941, 5012],
 [5051, 4989, 4933, 5047, 5012, 4978, 4947, 5026, 5092, 5033],
 [5051, 4978, 4933, 5013, 4955, 5038, 5004, 5026, 5092, 4947],
 [5053, 4980, 4975, 4973, 5092, 5111, 4998, 5046, 4991, 5054],
 [5049, 4932, 4991, 4987, 4980, 4975, 5046, 4956, 5053, 4973],
 [5120, 4951, 5110, 5055, 5051, 4947, 5026, 4933, 5033, 5012],
 [5010, 4956, 5014, 5046, 4998, 5024, 4991, 4980, 5053, 4992],
 [4954, 4960, 5012, 5055, 5080, 5026, 5066, 4925, 4951, 5110]]

cf_recs = [[296, 356, 1, 318, 593, 1198, 260, 780, 480, 2571],
 [480, 296, 780, 318, 1, 356, 2858, 593, 1198, 260],
 [296, 356, 1, 593, 318, 480, 1198, 780, 260, 2571],
 [296, 480, 318, 356, 780, 1, 380, 593, 527, 150],
 [296, 480, 318, 356, 1, 380, 780, 593, 150, 590],
 [296, 480, 1, 318, 356, 780, 593, 2858, 527, 1198],
 [296, 318, 1, 480, 356, 780, 593, 1198, 260, 2571],
 [296, 318, 480, 380, 356, 377, 150, 344, 590, 593],
 [480, 2858, 1, 780, 296, 318, 1198, 527, 356, 260],
 [480, 296, 1, 780, 356, 318, 1198, 260, 2858, 593],
 [296, 356, 318, 780, 367, 1, 593, 480, 377, 380],
 [296, 480, 356, 318, 1, 780, 593, 380, 590, 150],
 [296, 480, 318, 380, 356, 590, 344, 150, 593, 595],
 [296, 318, 356, 1, 780, 480, 377, 380, 367, 593],
 [296, 480, 318, 356, 380, 1, 150, 780, 593, 590],
 [480, 296, 1, 356, 318, 780, 2858, 593, 1198, 260],
 [480, 296, 1, 356, 780, 318, 1198, 260, 593, 2858],
 [480, 2858, 1, 318, 296, 780, 150, 356, 527, 595],
 [480, 296, 318, 780, 1, 356, 2858, 593, 527, 150],
 [296, 480, 318, 356, 1, 780, 593, 380, 150, 527],
 [296, 480, 318, 1, 356, 593, 590, 780, 150, 380],
 [296, 480, 318, 356, 380, 1, 344, 593, 377, 367],
 [1, 296, 480, 780, 356, 318, 1198, 260, 593, 2571],
 [296, 377, 367, 356, 380, 318, 344, 593, 589, 480],
 [296, 356, 318, 480, 1, 380, 377, 593, 780, 590],
 [296, 480, 318, 380, 356, 590, 593, 150, 344, 377],
 [296, 480, 318, 780, 356, 1, 593, 260, 1198, 2571],
 [296, 480, 318, 356, 380, 1, 780, 150, 590, 593],
 [296, 380, 153, 292, 377, 595, 344, 316, 592, 150],
 [480, 296, 318, 780, 356, 1, 2858, 593, 150, 527],
 [780, 356, 1, 296, 318, 480, 2571, 260, 1270, 1198],
 [296, 318, 480, 380, 356, 150, 590, 593, 344, 377],
 [480, 296, 318, 1, 780, 356, 2858, 593, 150, 527],
 [296, 380, 318, 480, 356, 377, 150, 595, 590, 344],
 [296, 480, 318, 780, 356, 1, 150, 260, 2571, 380],
 [480, 296, 780, 318, 1, 356, 2858, 527, 593, 1198],
 [480, 780, 1, 2858, 296, 318, 356, 1198, 527, 260],
 [296, 480, 318, 380, 356, 150, 595, 1, 344, 590],
 [296, 480, 1, 318, 780, 356, 593, 1198, 260, 2858],
 [480, 296, 1, 780, 318, 356, 2858, 1198, 260, 593],
 [480, 1, 296, 780, 318, 356, 2858, 1198, 593, 260],
 [296, 480, 318, 1, 780, 356, 593, 2858, 1198, 527],
 [296, 356, 480, 1, 318, 780, 260, 2571, 593, 1198],
 [480, 296, 1, 318, 356, 780, 593, 2858, 1198, 260],
 [480, 1, 780, 2858, 318, 296, 356, 527, 1198, 260],
 [296, 480, 318, 380, 356, 153, 590, 344, 150, 595],
 [296, 480, 318, 356, 1, 780, 593, 380, 150, 590],
 [296, 480, 318, 1, 356, 593, 780, 590, 380, 150],
 [480, 296, 318, 1, 780, 356, 2858, 593, 527, 1198],
 [296, 356, 480, 318, 1, 780, 593, 260, 1198, 380],
 [296, 480, 318, 356, 1, 780, 593, 260, 1198, 380],
 [296, 480, 318, 356, 1, 780, 593, 380, 590, 150],
 [480, 2858, 1, 150, 318, 590, 595, 50, 597, 780],
 [296, 377, 367, 380, 356, 589, 593, 318, 344, 590],
 [480, 296, 1, 780, 318, 356, 2858, 1198, 260, 593],
 [296, 318, 480, 356, 1, 780, 593, 380, 260, 150],
 [296, 480, 318, 780, 1, 356, 593, 150, 260, 527],
 [296, 377, 356, 367, 380, 593, 318, 589, 32, 344],
 [480, 296, 1, 318, 356, 780, 2858, 593, 1198, 260],
 [480, 296, 1, 318, 356, 780, 150, 2858, 593, 590],
 [296, 356, 480, 1, 318, 780, 593, 260, 1198, 380],
 [480, 296, 1, 318, 780, 356, 2858, 593, 1198, 527],
 [480, 296, 1, 318, 780, 356, 2858, 593, 1198, 527],
 [296, 480, 318, 356, 380, 1, 780, 150, 590, 593],
 [480, 2858, 1, 780, 296, 318, 356, 1198, 527, 260],
 [480, 296, 318, 1, 356, 780, 593, 2858, 590, 150],
 [296, 480, 318, 356, 1, 780, 593, 380, 590, 150],
 [296, 480, 318, 356, 1, 780, 380, 150, 593, 590],
 [296, 380, 377, 344, 318, 356, 367, 480, 589, 592],
 [296, 480, 318, 356, 780, 1, 380, 593, 150, 260],
 [480, 1, 780, 2858, 1198, 260, 318, 296, 356, 527],
 [296, 318, 480, 356, 1, 780, 593, 380, 527, 1198],
 [296, 1, 480, 318, 356, 593, 780, 590, 1198, 260],
 [480, 1, 1198, 296, 780, 260, 356, 318, 2858, 593],
 [296, 480, 318, 356, 380, 593, 1, 590, 344, 780],
 [296, 480, 1, 356, 318, 780, 260, 1198, 593, 2571],
 [296, 480, 1, 356, 318, 593, 780, 1198, 260, 2858],
 [296, 480, 356, 318, 1, 780, 593, 260, 1198, 380],
 [480, 296, 1, 780, 318, 356, 2858, 593, 1198, 527],
 [480, 296, 1, 780, 318, 356, 2858, 1198, 260, 593],
 [480, 296, 318, 780, 1, 356, 2858, 150, 527, 593],
 [780, 260, 1, 1198, 2571, 480, 296, 356, 318, 1210],
 [296, 480, 318, 356, 1, 780, 593, 380, 590, 150],
 [296, 480, 318, 356, 380, 150, 780, 1, 590, 595],
 [480, 1, 296, 318, 780, 356, 2858, 1198, 593, 260],
 [480, 780, 1, 296, 1198, 260, 356, 318, 2858, 2571],
 [296, 480, 318, 380, 356, 1, 150, 593, 590, 595],
 [296, 356, 318, 480, 380, 1, 780, 593, 377, 367],
 [480, 780, 1, 296, 318, 356, 260, 1198, 2858, 2571],
 [296, 318, 356, 480, 1, 780, 593, 377, 380, 2571],
 [296, 377, 367, 380, 356, 344, 318, 32, 593, 1291],
 [480, 1, 2858, 780, 296, 318, 356, 527, 1198, 593],
 [296, 480, 318, 356, 380, 1, 150, 780, 590, 593],
 [296, 480, 318, 780, 1, 356, 593, 2858, 1198, 260],
 [480, 296, 318, 780, 1, 2858, 356, 527, 593, 1198],
 [1198, 260, 2571, 780, 1270, 1, 2959, 356, 2028, 1968],
 [480, 296, 1, 356, 318, 780, 2858, 1198, 593, 260],
 [1, 296, 356, 780, 480, 1198, 318, 260, 593, 2571],
 [480, 296, 1, 318, 356, 780, 2858, 593, 260, 1198],
 [296, 480, 318, 356, 780, 1, 593, 527, 380, 150],
 [296, 380, 480, 318, 153, 595, 150, 590, 344, 292],
 [296, 480, 318, 1, 356, 780, 593, 1198, 260, 590],
 [780, 480, 1, 296, 318, 356, 1198, 260, 2858, 527],
 [1244, 1188, 14, 904, 2858, 1183, 1233, 1230, 50, 1354],
 [296, 480, 1, 318, 356, 780, 593, 2858, 1198, 527],
 [480, 780, 1, 318, 296, 2858, 356, 1198, 260, 527],
 [296, 1, 780, 480, 356, 318, 1198, 260, 593, 2571],
 [296, 318, 480, 380, 356, 780, 150, 1, 595, 593],
 [296, 356, 318, 1, 480, 593, 780, 260, 1198, 2571],
 [296, 480, 318, 356, 780, 1, 593, 260, 1198, 380],
 [480, 1, 296, 780, 2858, 318, 356, 1198, 260, 527],
 [296, 480, 318, 356, 1, 593, 780, 590, 380, 150],
 [480, 2858, 1, 296, 318, 780, 527, 356, 593, 1198],
 [480, 2858, 296, 318, 1, 527, 780, 593, 356, 1198],
 [296, 480, 318, 780, 356, 1, 150, 593, 380, 260],
 [377, 296, 367, 1291, 380, 356, 1265, 32, 589, 344],
 [296, 480, 318, 356, 1, 780, 593, 380, 150, 590],
 [480, 1, 296, 2858, 318, 780, 356, 1198, 593, 527],
 [296, 480, 318, 356, 1, 780, 150, 380, 593, 595],
 [296, 480, 318, 356, 380, 590, 150, 1, 377, 593],
 [296, 480, 356, 318, 1, 780, 593, 380, 1198, 527],
 [480, 2858, 1, 780, 318, 527, 150, 50, 597, 296],
 [480, 296, 318, 780, 1, 356, 527, 2858, 150, 595],
 [296, 356, 377, 318, 367, 380, 593, 1, 780, 480],
 [480, 780, 1, 2858, 1198, 318, 296, 260, 527, 356],
 [296, 480, 318, 1, 356, 780, 593, 260, 1198, 527],
 [296, 480, 318, 380, 356, 150, 377, 344, 595, 590],
 [296, 480, 318, 356, 780, 1, 150, 380, 593, 595],
 [296, 356, 480, 1, 318, 380, 593, 590, 377, 780],
 [296, 377, 380, 344, 318, 292, 590, 589, 592, 356],
 [296, 377, 356, 380, 318, 367, 589, 480, 344, 1],
 [296, 377, 318, 356, 593, 380, 480, 590, 367, 344],
 [2571, 260, 1, 1198, 296, 780, 356, 480, 318, 2959],
 [296, 356, 593, 318, 377, 367, 1, 780, 32, 380],
 [296, 318, 480, 356, 380, 377, 1, 780, 150, 593],
 [1, 780, 296, 480, 356, 318, 260, 1198, 2571, 593],
 [296, 356, 367, 318, 593, 2571, 260, 1, 1198, 32],
 [480, 1, 296, 780, 356, 318, 1198, 260, 2858, 527],
 [480, 296, 318, 1, 2858, 356, 780, 527, 593, 1198],
 [296, 380, 318, 356, 480, 377, 593, 344, 590, 367],
 [296, 480, 318, 1, 356, 780, 593, 2858, 1198, 527],
 [296, 480, 318, 380, 356, 150, 590, 344, 593, 595],
 [296, 480, 318, 356, 1, 780, 593, 2858, 380, 150],
 [296, 480, 1, 356, 318, 780, 593, 1198, 260, 2858],
 [480, 1, 2858, 780, 296, 318, 356, 527, 1198, 260],
 [296, 480, 318, 356, 380, 1, 150, 780, 593, 595],
 [296, 356, 377, 318, 380, 367, 593, 589, 1, 480],
 [480, 296, 780, 318, 1, 356, 2858, 527, 593, 1198],
 [296, 480, 318, 356, 1, 380, 780, 593, 150, 590],
 [480, 1, 296, 318, 780, 2858, 356, 527, 593, 150],
 [296, 480, 318, 356, 1, 780, 380, 593, 150, 590],
 [296, 318, 356, 480, 380, 377, 1, 780, 593, 367],
 [296, 318, 356, 480, 1, 380, 593, 377, 780, 367],
 [296, 356, 1, 780, 260, 480, 2571, 318, 1198, 593],
 [296, 480, 318, 1, 356, 780, 593, 1198, 260, 2858],
 [2174, 1291, 1101, 4027, 32, 377, 2762, 367, 1246, 1265],
 [296, 356, 480, 318, 1, 780, 380, 593, 377, 590],
 [296, 380, 377, 292, 153, 344, 318, 595, 480, 590],
 [296, 480, 318, 356, 780, 1, 593, 380, 150, 527],
 [153, 292, 296, 380, 595, 150, 592, 318, 480, 344],
 [480, 1, 2858, 296, 780, 1198, 356, 318, 260, 527],
 [296, 1, 356, 780, 318, 480, 260, 1198, 2571, 593],
 [296, 480, 356, 1, 780, 318, 1198, 260, 593, 2571],
 [296, 318, 380, 480, 356, 150, 377, 595, 344, 780],
 [296, 380, 153, 480, 595, 318, 150, 292, 592, 344],
 [480, 296, 1, 780, 2858, 318, 356, 527, 1198, 593],
 [480, 1, 780, 296, 318, 356, 1198, 260, 2858, 593],
 [296, 1, 780, 480, 356, 318, 260, 1198, 2571, 593],
 [480, 296, 318, 1, 356, 780, 593, 2858, 527, 590],
 [296, 1, 480, 356, 780, 1198, 318, 593, 260, 2858],
 [296, 480, 356, 780, 318, 1, 593, 1198, 260, 527],
 [296, 480, 318, 380, 356, 150, 1, 595, 590, 780],
 [480, 296, 318, 1, 356, 780, 593, 2858, 150, 527],
 [480, 296, 780, 1, 356, 318, 1198, 260, 2858, 593],
 [296, 318, 480, 356, 1, 780, 380, 377, 593, 150],
 [480, 296, 780, 1, 318, 356, 1198, 2858, 260, 593],
 [296, 480, 1, 780, 356, 318, 1198, 260, 593, 2858],
 [2858, 480, 780, 1198, 1, 527, 260, 356, 296, 318],
 [480, 296, 780, 1, 356, 318, 1198, 593, 2858, 260],
 [480, 296, 780, 1, 318, 356, 2858, 1198, 260, 593],
 [296, 480, 356, 318, 1, 780, 593, 2858, 380, 590],
 [480, 1, 2858, 780, 318, 1198, 356, 527, 296, 260],
 [296, 480, 318, 380, 356, 150, 595, 590, 780, 153],
 [296, 380, 153, 292, 595, 150, 377, 318, 480, 592],
 [296, 480, 318, 780, 356, 1, 593, 150, 527, 380],
 [296, 480, 318, 356, 780, 1, 380, 593, 150, 590],
 [480, 296, 1, 356, 318, 780, 593, 2858, 1198, 260],
 [296, 318, 480, 380, 356, 150, 780, 377, 1, 595],
 [296, 480, 318, 356, 780, 1, 380, 593, 150, 527],
 [480, 1, 1198, 260, 780, 356, 296, 2858, 318, 2571],
 [480, 2858, 1, 318, 780, 296, 527, 356, 593, 150],
 [780, 480, 296, 1, 1198, 318, 356, 2858, 260, 527],
 [480, 780, 1, 296, 318, 1198, 2858, 356, 260, 2571],
 [296, 780, 480, 1, 356, 318, 1198, 260, 593, 2858],
 [480, 1, 780, 2858, 1198, 318, 296, 260, 356, 527],
 [296, 1, 480, 780, 1198, 356, 318, 260, 593, 2571],
 [480, 2858, 318, 1, 296, 780, 527, 150, 356, 593],
 [480, 780, 1, 2858, 1198, 318, 296, 260, 356, 527],
 [480, 780, 1, 2858, 1198, 296, 318, 356, 260, 527],
 [296, 318, 480, 380, 356, 344, 150, 377, 593, 595]]

rgcn_recs = [[4703, 86833, 2677, 67197, 2941, 1235, 2114, 2312, 2953, 64614],
 [68791, 1914, 145, 1931, 441, 2890, 737, 673, 784, 1948],
 [3274, 2133, 2413, 2599, 2792, 2871, 48516, 2989, 45722, 2064],
 [1025, 1251, 1296, 1533, 1953, 306, 581, 748, 836, 1244],
 [1784, 4447, 4161, 4313, 109864, 2739, 2404, 2402, 2289, 2085],
 [413, 434, 527, 550, 551, 552, 592, 1923, 502, 485],
 [534, 60069, 2092, 1474, 5, 34, 36, 95, 585, 786],
 [3175, 2908, 294, 280, 2987, 274, 272, 3062, 267, 249],
 [55247, 2126, 1064, 1093, 1717, 1354, 1274, 1320, 1527, 1591],
 [1100, 915, 246, 14, 2356, 2485, 2495, 81, 419, 473],
 [4018, 48385, 46970, 3578, 3793, 3798, 8528, 3977, 8464, 3994],
 [267, 48774, 1453, 48516, 48394, 1474, 248, 249, 250, 255],
 [1690, 441, 546, 700, 616, 673, 761, 784, 1029, 3301],
 [5, 5445, 5618, 6365, 6377, 6537, 6874, 7361, 7444, 7458],
 [3101, 353, 372, 381, 434, 527, 550, 551, 552, 592],
 [1041, 1025, 921, 836, 5299, 5377, 5378, 5445, 5618, 1280],
 [32587, 2114, 1235, 8665, 8798, 8983, 27773, 30707, 27904, 2677],
 [2770, 55100, 7458, 71282, 55820, 56788, 57792, 2671, 3387, 58315],
 [5378, 2473, 2109, 1461, 1377, 1091, 999, 2976, 4974, 308],
 [1962, 2394, 2324, 2161, 2115, 2094, 2087, 2078, 2059, 2010],
 [2420, 1914, 1961, 1537, 2023, 1293, 1292, 1231, 913, 2134],
 [1962, 3360, 2501, 2470, 2406, 2324, 2161, 2115, 2087, 3471],
 [534, 2871, 954, 910, 902, 898, 838, 783, 745, 728],
 [45722, 6365, 6377, 6537, 6711, 6874, 6934, 7361, 7458, 8622],
 [8360, 934, 916, 915, 246, 14, 45431, 1254, 38038, 8376],
 [3062, 8, 3060, 2795, 155, 195, 2908, 315, 222, 2987],
 [48516, 1227, 1244, 1280, 1296, 1299, 51662, 1701, 48774, 48738],
 [191, 338, 344, 349, 353, 372, 381, 434, 527, 550],
 [4085, 383, 186, 3755, 3256, 3082, 2353, 2002, 1233, 4321],
 [427, 36, 34, 5, 3984, 940, 1939, 1298, 6947, 361],
 [41997, 32596, 34405, 112852, 2087, 70687, 2078, 3363, 2059, 118696],
 [455, 1285, 3994, 1126, 4023, 4062, 934, 5989, 4270, 4308],
 [158, 502, 485, 466, 455, 3770, 25, 969, 1204, 1250],
 [3101, 3755, 3256, 3082, 2353, 2002, 1608, 1233, 4321, 4085],
 [4270, 4979, 3949, 3911, 3977, 2352, 2141, 1968, 3994, 4018],
 [5502, 32587, 2302, 2321, 3034, 5903, 2336, 5669, 5618, 6365],
 [1366, 2322, 2167, 2006, 1835, 168, 1805, 236, 277, 288],
 [2003, 36, 34, 1343, 247, 1385, 1391, 1409, 58, 1449],
 [3114, 3752, 3745, 688, 3535, 3396, 1223, 1644, 2300, 289],
 [333, 1234, 265, 485, 455, 25, 969, 1204, 1250, 1960],
 [2355, 1747, 2416, 2702, 2717, 2600, 2572, 2420, 3246, 1260],
 [1132, 58559, 41, 78, 837, 994, 1041, 1050, 1114, 1124],
 [745, 1013, 954, 911, 910, 902, 898, 838, 783, 1022],
 [4262, 1931, 903, 1267, 1569, 2019, 3468, 28, 1287, 4973],
 [225, 534, 497, 471, 3180, 474, 435, 432, 317, 315],
 [4974, 1185, 1124, 1041, 994, 472, 78, 41, 2109, 1663],
 [1233, 288, 292, 338, 344, 349, 353, 372, 434, 527],
 [1287, 4974, 4973, 903, 1267, 1569, 2019, 3468, 28, 1293],
 [2313, 2827, 1907, 1914, 2717, 2572, 2420, 1293, 2355, 4025],
 [95, 468, 474, 435, 432, 317, 315, 300, 786, 585],
 [2087, 2501, 2470, 2406, 2394, 2324, 2161, 2115, 2094, 2724],
 [1527, 546, 616, 673, 784, 1029, 163, 89, 73, 18],
 [583, 994, 850, 848, 837, 25, 969, 1960, 2058, 3107],
 [6874, 16, 3052, 252, 1173, 1171, 339, 348, 4025, 355],
 [2822, 3101, 434, 527, 550, 551, 2997, 592, 1923, 2924],
 [46578, 1711, 51662, 1834, 1953, 2132, 2357, 48774, 48516, 1701],
 [8970, 53123, 1236, 1794, 2356, 2485, 2495, 81, 38038, 419],
 [1711, 2003, 6365, 6377, 6711, 1275, 6874, 6934, 1173, 1135],
 [2712, 2539, 2717, 2572, 2420, 2587, 2355, 2700, 2294, 2502],
 [40870, 538, 3114, 3246, 1747, 1354, 3897, 1088, 55247, 54286],
 [59369, 68954, 61132, 527, 552, 592, 1923, 60756, 2605, 2706],
 [1298, 786, 585, 95, 36, 34, 5, 3984, 940, 1939],
 [48, 2238, 1234, 485, 4643, 455, 333, 267, 157, 4994],
 [306, 837, 1041, 1124, 1175, 1227, 1251, 1296, 1953, 472],
 [163, 1407, 2478, 1147, 1120, 1092, 1061, 1015, 647, 543],
 [1957, 2724, 2501, 2470, 2406, 2324, 2161, 2115, 2087, 1962],
 [2324, 4886, 3916, 3809, 3471, 3360, 2724, 2501, 2470, 2406],
 [2424, 2, 4008, 45, 7361, 1732, 1704, 58, 247, 2396],
 [1608, 426, 383, 209, 186, 3527, 3755, 3578, 3256, 3671],
 [1126, 2406, 2470, 2966, 3360, 3471, 4499, 4886, 5620, 209],
 [78499, 54272, 1093, 52973, 1274, 1320, 1339, 1367, 1527, 1591],
 [54272, 2136, 1483, 4262, 4246, 4235, 48385, 52973, 5989, 3682],
 [585, 3203, 60069, 3068, 2871, 2599, 2413, 2379, 2133, 2064],
 [2379, 1186, 1275, 1438, 1488, 1956, 53996, 2003, 2064, 2133],
 [261, 5303, 4499, 2081, 3809, 2976, 3471, 3360, 22, 31],
 [933, 3097, 2724, 2501, 2470, 2406, 2324, 2161, 2115, 2087],
 [53996, 6870, 59315, 58559, 56949, 56174, 193, 55282, 1916, 54001],
 [107, 7619, 4262, 4246, 4235, 3821, 3836, 3869, 3873, 3654],
 [3809, 66, 5380, 5303, 5267, 5218, 5066, 4921, 4886, 3916],
 [45440, 3421, 3764, 6378, 6377, 4534, 5246, 926, 2186, 2401],
 [54997, 3054, 3326, 3213, 4238, 3269, 3300, 3396, 3535, 1547],
 [6787, 3256, 90866, 1608, 1233, 4321, 4066, 3868, 3608, 2997],
 [7502, 33166, 3186, 307, 412, 800, 1224, 849, 30707, 27904],
 [198, 252, 271, 276, 339, 348, 351, 355, 357, 362],
 [1049, 6953, 6874, 2357, 836, 6711, 921, 1005, 1025, 1296],
 [2144, 3101, 2997, 2924, 2889, 2759, 2747, 2372, 2248, 2245],
 [231, 1753, 4995, 2485, 21, 39, 48, 153, 161, 168],
 [3097, 5747, 5303, 5218, 4886, 4499, 3916, 3809, 3751, 3471],
 [2355, 1320, 2606, 2492, 1690, 2188, 1961, 715, 2023, 1760],
 [6378, 49272, 6711, 6659, 53322, 54286, 6537, 55247, 6383, 47044],
 [4025, 1366, 1111, 3527, 1059, 3578, 678, 3671, 535, 342],
 [2058, 3034, 945, 4022, 933, 4034, 4148, 2402, 2085, 26614],
 [2890, 3717, 2997, 3793, 3826, 281, 44, 3911, 3977, 3994],
 [47640, 745, 36517, 471, 71462, 1916, 7451, 8783, 8874, 34162],
 [1113, 1296, 306, 58559, 748, 836, 1025, 1049, 1081, 1185],
 [5630, 3994, 4018, 72226, 63082, 54503, 8910, 4979, 4270, 4308],
 [102, 2359, 2401, 3421, 3764, 6874, 5246, 926, 6711, 2186],
 [3146, 2572, 2600, 923, 778, 12, 3083, 64957, 3114, 319],
 [58293, 6955, 60516, 7256, 60069, 36517, 59615, 71462, 59315, 1916],
 [381, 172, 185, 207, 208, 231, 236, 277, 288, 292],
 [339, 743, 93, 802, 15, 16, 105, 122, 252, 271],
 [1302, 106920, 2078, 2059, 2049, 2010, 1962, 1957, 1954, 1947],
 [2003, 3273, 4823, 2794, 3174, 4771, 364, 3300, 2961, 3285],
 [1527, 1580, 1673, 800, 1224, 849, 1377, 2109, 994, 1227],
 [1960, 23, 256, 170, 158, 145, 42, 44, 2058, 20],
 [3174, 2470, 262, 2406, 3873, 203, 2324, 2161, 2671, 2115],
 [3916, 5620, 5380, 5303, 5267, 5218, 5066, 4921, 4886, 4499],
 [1020, 1784, 852, 880, 912, 23, 20, 9, 477, 417],
 [3360, 5303, 5218, 5066, 4886, 1907, 3916, 3809, 3751, 3471],
 [471, 910, 902, 898, 838, 783, 745, 728, 534, 497],
 [95, 534, 497, 474, 435, 432, 315, 300, 585, 745],
 [4628, 27075, 2135, 8633, 2822, 3241, 8376, 8360, 3357, 3831],
 [5747, 3096, 8633, 8376, 66, 7161, 6776, 1030, 1033, 8970],
 [63062, 609, 101, 100, 92, 88, 86, 74, 2847, 61],
 [8622, 34405, 3949, 4979, 8910, 52319, 64839, 8810, 1224, 2352],
 [2012, 3755, 2329, 3082, 3301, 2353, 3578, 1608, 3623, 2054],
 [2724, 174, 5303, 5066, 4499, 3809, 3471, 3360, 3097, 6776],
 [1422, 1088, 2572, 2420, 1057, 2355, 2313, 2294, 1416, 2717],
 [3006, 4019, 4023, 535, 4062, 493, 342, 4270, 4308, 232],
 [4062, 1112, 3826, 680, 49272, 1211, 3911, 3977, 1088, 830],
 [1610, 2324, 2161, 2115, 2087, 2010, 1962, 1957, 1954, 2406],
 [1753, 3471, 3809, 4499, 116, 6776, 14, 246, 326, 916],
 [585, 2686, 2116, 2097, 1104, 1086, 427, 361, 6947, 3105],
 [49272, 36529, 7361, 40819, 44195, 44665, 6934, 6874, 6711, 7444],
 [5602, 6617, 6753, 6620, 6708, 8914, 6533, 8950, 27611, 5747],
 [107, 2134, 3821, 3836, 3869, 2042, 2023, 3873, 68, 2294],
 [443, 338, 344, 349, 353, 372, 381, 434, 527, 550],
 [3254, 353, 372, 3301, 434, 527, 550, 551, 552, 592],
 [64614, 5, 71282, 912, 80862, 80748, 2871, 80489, 80350, 76060],
 [1717, 613, 5349, 5378, 325, 5445, 174, 5618, 6016, 4020],
 [2378, 1527, 1690, 1961, 2423, 2422, 2023, 2042, 2109, 1377],
 [5349, 3752, 3863, 3897, 3980, 4052, 48385, 4235, 4246, 4641],
 [27904, 33493, 33166, 31878, 31658, 1916, 30812, 30793, 30707, 33794],
 [1569, 16, 14, 122, 252, 1293, 903, 339, 348, 355],
 [5445, 371, 340, 333, 280, 272, 4973, 4974, 248, 5225],
 [51662, 1033, 55282, 68791, 54001, 53996, 53464, 53125, 2126, 52281],
 [30825, 33166, 33493, 33794, 2926, 41569, 45722, 46578, 48394, 48516],
 [1030, 21, 39, 48, 153, 2490, 172, 2411, 1033, 208],
 [8633, 1380, 1285, 1126, 934, 916, 915, 246, 14, 8970],
 [3578, 265, 830, 3408, 426, 3448, 383, 186, 3755, 3256],
 [5608, 55820, 55052, 44555, 40815, 31410, 30749, 8645, 7323, 6942],
 [125, 1569, 2019, 28, 40815, 31410, 1254, 1232, 30749, 6942],
 [39, 23, 20, 4643, 9, 477, 417, 213, 5010, 1172],
 [1148, 2087, 1962, 1957, 1954, 1610, 1302, 1282, 1207, 2161],
 [6377, 2003, 1991, 1963, 5299, 1801, 5378, 1702, 5445, 1186],
 [3578, 3869, 2289, 1958, 1952, 3408, 227, 205, 1112, 1784],
 [1046, 1367, 1339, 1320, 1274, 1267, 1569, 2019, 1093, 262],
 [3114, 1961, 2023, 2134, 2294, 2313, 2355, 2420, 2572, 2717],
 [295, 673, 761, 784, 1029, 514, 450, 437, 423, 1274],
 [616, 785, 1032, 1029, 828, 784, 761, 111, 673, 1064],
 [849, 445, 3157, 3186, 230, 307, 1150, 8972, 1224, 27904],
 [56949, 60069, 3984, 180, 59615, 59315, 3261, 58559, 6947, 427],
 [838, 1282, 1207, 1148, 1022, 1013, 954, 910, 902, 898],
 [3683, 2023, 3504, 2846, 1961, 1690, 1688, 1591, 1527, 2042],
 [3267, 1918, 1912, 1625, 1615, 1552, 1378, 4210, 4002, 3481],
 [357, 377, 173, 316, 329, 185, 208, 442, 231, 805],
 [1296, 1759, 218, 249, 267, 272, 6874, 1299, 6711, 7361],
 [374, 326, 246, 2908, 14, 278, 340, 371, 227, 205],
 [1960, 542, 537, 4022, 533, 516, 4148, 502, 485, 481],
 [66, 1029, 1004, 1320, 1339, 1367, 1432, 1527, 28, 1690],
 [3702, 4052, 3552, 154, 3897, 446, 3863, 3752, 538, 3543],
 [2997, 2353, 1608, 4321, 1031, 4378, 3868, 6303, 40412, 71106],
 [4321, 1952, 1784, 1252, 186, 3755, 3256, 3082, 2353, 1608],
 [1274, 158, 170, 256, 405, 410, 441, 546, 616, 673],
 [364, 60, 317, 140, 141, 150, 224, 235, 282, 17],
 [661, 322, 319, 262, 1884, 111, 785, 725, 724, 707],
 [7099, 7458, 7444, 4239, 7361, 1686, 7293, 1759, 1897, 3910],
 [2375, 31410, 30749, 8645, 7323, 6535, 6942, 5878, 5608, 3967],
 [3578, 162, 3219, 2352, 3354, 1968, 428, 261, 31, 3512],
 [800, 2109, 3752, 3863, 3897, 1377, 1091, 4235, 4246, 7147],
 [441, 1729, 784, 1754, 1805, 673, 616, 7417, 1833, 1029],
 [381, 185, 207, 208, 231, 236, 277, 288, 292, 338],
 [30749, 63062, 71106, 3983, 4069, 4141, 59018, 55820, 906, 44694],
 [1285, 2997, 2889, 2372, 2248, 2245, 2144, 1753, 1394, 1380],
 [8622, 3984, 30707, 88744, 89745, 45, 58, 8810, 345, 1033],
 [838, 1148, 1022, 1013, 110730, 111622, 954, 111921, 910, 898],
 [6942, 55, 4039, 63062, 5049, 55820, 44694, 69436, 40815, 31410],
 [3863, 79702, 3744, 4052, 4015, 45210, 3980, 89745, 3897, 4235],
 [3548, 8604, 68157, 5620, 5218, 4886, 3916, 3809, 3751, 4069],
 [6776, 3978, 2746, 3988, 3994, 4019, 4023, 8360, 3263, 3654],
 [552, 236, 277, 288, 292, 338, 344, 349, 353, 3461],
 [2924, 3868, 3773, 3760, 3608, 3461, 71518, 69757, 3101, 750],
 [673, 25, 155, 1960, 65, 145, 158, 170, 256, 405],
 [193, 7458, 1100, 1382, 1336, 990, 818, 747, 419, 332],
 [4006, 31, 4262, 4246, 4235, 6059, 261, 428, 4015, 5944],
 [3471, 8360, 700, 6776, 5303, 5066, 4499, 3809, 3751, 521],
 [4246, 4718, 3274, 3264, 3087, 4701, 5418, 5464, 4262, 4973],
 [1302, 452, 468, 471, 497, 534, 728, 745, 838, 910],
 [2890, 3418, 2605, 2706, 2719, 2840, 3301, 3785, 3255, 3253],
 [2966, 5380, 5218, 5066, 4886, 8950, 3916, 3751, 27611, 30825],
 [5066, 915, 326, 246, 14, 26614, 8360, 6776, 6662, 5380],
 [1236, 2987, 2993, 1485, 3062, 1476, 1405, 1147, 435, 1061],
 [6776, 915, 326, 2847, 8633, 2926, 8376, 2995, 3013, 916],
 [656, 923, 322, 319, 262, 1884, 111, 785, 725, 724],
 [3273, 39, 48, 3624, 3623, 3617, 3483, 3418, 3409, 3301],
 [1339, 3107, 1194, 4844, 441, 4823, 673, 741, 784, 1032],
 [2023, 48043, 441, 673, 1029, 1320, 1527, 1688, 2145, 1961],
 [51255, 8874, 34162, 39427, 60684, 40583, 60516, 47640, 60069, 47810],
 [66, 1954, 1962, 2115, 2161, 2324, 2394, 2406, 2724, 2966],
 [5, 2003, 1488, 1353, 1275, 1173, 1135, 1113, 1081, 1049]]

# CONTENT BASED MODEL FUNCTIONS
class SimilarityPredictions(object):
    '''This class calculates a similarity matrix from latent embeddings.
    There is a method to save this similarity model locally, and a method for
    predicting similar items from the matrix.
    Input: embeddings - a pandas dataframe of items and latent dimensions.
            similarity_metric = str definining the similarity metrics to use'''

    def __init__(self, embeddings, similarity_metric='cosine'):
        assert similarity_metric in ['cosine', 'euclidean'], "unsupported similarity metric."
        self.embeddings = embeddings
        self.ids = embeddings.index.tolist()
        self.similarity_metric = similarity_metric
        if similarity_metric == 'cosine':
            self.similarity_matrix = self.calculate_cosine_similarity_matrix()
        if similarity_metric == 'euclidean':
            self.similarity_matrix = self.calculate_euclidean_distances_matrix()

    def calculate_cosine_similarity_matrix(self):
        '''Calculates a cosine similarity matrix from the embeddings'''
        similarity_matrix = pd.DataFrame(cosine_similarity(
            X=self.embeddings),
            index=self.ids)
        similarity_matrix.columns = self.ids
        return similarity_matrix

    def calculate_euclidean_distances_matrix(self):
        '''Calculates a cosine similarity matrix from the embeddings'''
        similarity_matrix= pd.DataFrame(euclidean_distances(
            X=self.embeddings),
            index=self.ids)
        similarity_matrix.columns = self.ids
        return similarity_matrix

    def predict_similar_items(self, seed_item, n):
        '''Use the similarity_matrix to return n most similar items.'''
        similar_items = pd.DataFrame(self.similarity_matrix.loc[seed_item])
        similar_items.columns = ["similarity_score"]
        if self.similarity_metric == 'cosine':
            similar_items = similar_items.sort_values('similarity_score', ascending=False)
        if self.similarity_metric == 'euclidean':
            similar_items = similar_items.sort_values('similarity_score', ascending=True)
        similar_items = similar_items.head(n)
        similar_items.reset_index(inplace=True)
        similar_items = similar_items.rename(index=str, columns={"index": "item_id"})
        return similar_items.to_dict()

# STREAMLIT CODE STARTS HERE

menu = ["Home","Overall Recommendations - Weighted","Content Based Model Recommendations", "NN CF Model Recommendations", "GCN Model Recommendations","Clustering Model Recommendations", "Metrics Overall"]
choice = st.sidebar.selectbox("Menu",menu)

if choice =="Home":
    # LANDING PAGE 
    st.title('Movie Recommender System')
    st.subheader('This is a hybrid recommender system')
    st.text('It is comprised of four models - Content based model, Clustering model,')
    st.text('Social GCN hybrid Model and a Neural CF model.')
    st.subheader('Hybrid Model - Working')
    st.video("assets/hybrid-model-demo.mp4", format="video/mp4", start_time=0)


if choice =="Overall Recommendations - Weighted":
    #get recommendations titles
    # MOVIES FOR OVERALL RECCS 
    movies = pd.read_csv('data/modified_movies.csv')
    movies.drop_duplicates(subset='movieId', inplace=True)

    st.header("Recommendations for a User")
    st.text("The Models have been pre-trained and the results are stored.")
    st.text("Enter a user id and get recommendations for that user.")

    user_id = st.number_input("Enter a user id", min_value=0, max_value=199, value=1, step=1)
    user_id = int(user_id)
    final_recommendations = weighted[user_id]
    st.subheader("The recommendations for the user are:")
    for id in final_recommendations:
        st.text(movies[movies['movieId']==id]['title'].values[0])

if choice =="GCN Model Recommendations":
    st.header("Hybrid GCN Recommender")
    st.markdown("From the tag and rating information present in the dataset, we form three types of graph")
    st.subheader("Three types of graphs: ")
    st.markdown("1. **User-user** graphs: based on similar user tags")
    st.code("Number of Links: 1647 \nLink density: 0.0411")
    st.markdown("2. **User-item** graphs: based on rating information")
    st.code("Number of Links: 45661 \nLink density: 0.0463")
    st.markdown("3. **Item-item** graphs: based on similar item tags")
    st.code("Number of Links: 1842305 \nLink density: 0.0760")
    
    st.subheader("Model workflow: ")
    st.image("data/gcn.png")

    st.subheader("Recommendations for a User")
    st.text("The Models have been pre-trained and the results are stored.")
    st.text("Enter a user id and get recommendations for that user.")
    number = st.number_input("Enter a user id", min_value=0, max_value=199, value=1, step=1)
    number = int(number)
    movs = pd.read_csv("data/modified_movies.csv")
    movtitle = []
    for i in rgcn_recs[int(number)]:
        movtitle.append(movs[movs['movieId'] == i]['title'].values[0])

    st.write(movtitle)

    st.subheader("Evaluation metrics")

    st.write("Precision: 0.1610")
    st.write("Recall: 0.0193")
    st.write("Coverage: 19.03")
    st.write("Novelty: 4.4584")
    st.write("Personalization: 0.9882")
    st.write("Intra-list similarity: 0.2375")
    st.write("Serendipity: 1.2340")    


if choice =="NN CF Model Recommendations":
    st.header("NN CF Recommender")
    st.subheader("Interaction Matrix")

    def fetch_movielens(
        data_home=None,
        indicator_features=True,
        genre_features=False,
        min_rating=0.0,
        download_if_missing=True,
    ):

        users = pd.read_csv('data/modified_users.csv')
        movies = pd.read_csv('data/modified_movies.csv')
        ratings = pd.read_csv('data/modified_ratings.csv')
    
        users = users['userId']
        movies = movies['movieId']

        user_ids = range(len(users))
        movie_ids = range(len(movies))

        user_to_id = dict(zip(users, user_ids))
        movie_to_id = dict(zip(movies, movie_ids))

        # get adjacency info
        num_user = users.shape[0]
        num_item = movies.shape[0]

        # initialize the adjacency matrix
        rat = np.zeros((num_user, num_item))

        count = 0
        for index, row in ratings.iterrows():
            user, movie, rating = row[:3]
            if num_user != -1:
                if user not in user_to_id: 
                    print(count)
                    count = count + 1
                    break
            # create ratings matrix where (i, j) entry represents the ratings
            # of movie j given by user i.
            rat[user_to_id[user], movie_to_id[movie]] = rating


        num_train_replaced = \
            round((0.2)*num_user*num_item)

        # edges masked during training
        indices_user = np.random.randint(0, num_user, num_train_replaced)
        indices_item = np.random.randint(0, num_item, num_train_replaced)

        train_mask = np.ones((num_user, num_item))
        train_mask[indices_user, indices_item] = 0

        test_mask = np.ones_like(train_mask)

        train = np.multiply(train_mask, rat)
        test = np.multiply(test_mask, rat)

        assert train.shape == test.shape
    
        features = []
        feature_labels = []
        id_feature_labels = []

        data = {
            "train": train,
            "test": test,
            "item_features": features,
            "item_feature_labels": feature_labels,
            "item_labels": id_feature_labels,
        }

        return data
    
    data = fetch_movielens(min_rating=3.0)
    st.write(data["train"])

    st.subheader("Model Architecture")
    st.image("data/nn cf.png")

    #nn cf model
    st.subheader("Model Parameters")
    st.image("data/nn_cf modelParams.png")

    st.subheader("Recommendations for a User")
    st.text("The Models have been pre-trained and the results are stored.")
    st.text("Enter a user id and get recommendations for that user.")
    
    number = st.number_input("Enter a user id", min_value=0, max_value=199, value=1, step=1)
    number = int(number)
    movs = pd.read_csv("data/modified_movies.csv")
    movtitle = []
    for i in cf_recs[int(number)]:
        movtitle.append(movs[movs['movieId'] == i]['title'].values[0])

    st.write(movtitle)

    st.subheader("Evaluation metrics")

    st.write("Precision: 0.4130")
    st.write("Recall: 0.0329")
    st.write("Coverage: 0.69")
    st.write("Novelty: 1.4334")
    st.write("Personalization: 0.2228")
    st.write("Intra-list similarity: 0.2351")
    st.write("Serendipity: 1.1398")    

if choice =="Content Based Model Recommendations":
    st.header("Content-based recommender")
    tags = pd.read_csv("data/tags.csv")
    ratings = pd.read_csv("data/modified_ratings.csv")
    ratings = ratings.drop_duplicates('movieId')
    users = pd.read_csv("data/modified_users.csv")
    users_list = users.userId.unique()
    movies = pd.read_csv("data/modified_movies.csv")
    movies_list = movies.movieId.unique()
    new_tags = tags[tags['movieId'].isin(movies_list) & tags['userId'].isin(users_list)]

    st.subheader("Raw data")
    st.write("Users: ")
    st.write(users)
    st.write("Movies: ")
    st.write(movies)
    st.write("Ratings: ")
    st.write(ratings)
    st.write("Tags: ")
    st.write(new_tags)

    st.subheader("Model workflow")
    st.image("data/content.png")

    #map movie index for tags data
    new_tags = pd.merge(new_tags, ratings, on="movieId", how="right")

    #map movie index for movie data
    movies = pd.read_csv("data/modified_movies.csv")
    movies = pd.merge(movies, ratings, on="movieId", how="inner")
    movies.set_index('movieId', inplace=True)
    movies['genres'] = movies['genres'].str.replace(pat="|", repl=" ")
    movies['genres'] = movies['genres'].str.replace(pat="-", repl="")

    #create documents from tags
    new_tags.fillna("", inplace=True)
    new_tags = pd.DataFrame(new_tags.groupby('movieId')['tag'].apply(lambda x: "{%s}" % ' '.join(x)))
    new_tags.reset_index(inplace=True)
    movie_id = new_tags.movieId

    # add genres to document
    new_tags = pd.merge(movies, new_tags, left_index=True, right_on='movieId', how='right')
    new_tags['document'] = new_tags[['tag', 'genres']].apply(lambda x: ' '.join(x), axis=1)

    #loading the tf-idf vectors
    with open('data/tfidf_matrix.pkl', 'rb') as fh:
        tfidf = pickle.load(fh)

    #loading the content embeddings
    content_embeddings = pd.read_pickle("data/autoencoder_embeddings.pkl")
    content_embeddings = pd.DataFrame(content_embeddings)

    st.subheader("Loading the tf-idf vectors from the saved model: ")
    st.write(tfidf)

    st.subheader("Loading the movie embeddings from the saved model: ")
    st.write(content_embeddings)

    #format movie lookup data
    movies = pd.read_csv("data/modified_movies.csv")
    ratings = pd.read_csv("data/modified_ratings.csv")
    movies = pd.merge(movies, ratings, on="movieId", how="inner")

    #get popularity
    popularity = pd.DataFrame(movies[['userId', 'title', 'movieId']].groupby(['title', 'movieId']).agg(['count']))
    popularity.reset_index(inplace=True)
    popularity.columns = ['title', 'movieId', 'ratings_count']
    popularity.sort_values('ratings_count', ascending=False, inplace=True)
    movies = pd.merge(popularity[['movieId', 'ratings_count']], movies, on='movieId')
    movies.reset_index(inplace=True)

    #get average ratings
    average_ratings = pd.DataFrame(movies[['rating', 'title', 'movieId']].groupby(['title', 'movieId']).agg(['mean']))
    average_ratings.reset_index(inplace=True)
    average_ratings.columns = ['title', 'movieId', 'avg_rating']
    movies = pd.merge(average_ratings[['movieId', 'avg_rating']], movies, on='movieId')
    movies.reset_index(inplace=True)

    movies = movies[['movieId', 'title', 'genres', 'ratings_count', 'avg_rating']]
    movies.drop_duplicates(inplace=True)
    movies.set_index('movieId', inplace=True, drop=True)
    movies.sort_index(ascending=True, inplace=True)

    st.write("Movie popularity: ")
    st.write(movies)

    def get_detailed_recs(movie_id, embeddings, file_path):
        #get similar movies
        sim_model = SimilarityPredictions(embeddings, similarity_metric="cosine")
        #sim_model = SimilarityPredictions(embeddings, similarity_metric="euclidean")
        output = sim_model.predict_similar_items(seed_item=movie_id, n=100)
        similar_movies = pd.DataFrame(output)
        similar_movies.set_index('item_id', inplace=True)
        sim_df = pd.merge(movies, similar_movies, left_index=True, right_index=True)
        sim_df.sort_values('similarity_score', ascending=False, inplace=True)
        
        #save recs locally
        sim_df.head(100).to_csv(file_path, index=False, header=True)
        return sim_df.head(100)
        
    movie_titles = movies['title'].tolist()

    st.subheader("Recommendations")
    st.text("The Models have been pre-trained and the results are stored.")

    option = st.selectbox(
        'Pick a movie',
        movie_titles)
    st.write('You selected:', option)

    movid = movies[movies['title'] == option].index

    get_detailed_recs(movid[0], content_embeddings, 'content_recs_nb.csv')
    recs = pd.read_csv("content_recs_nb.csv")
    print(recs.iloc[0])

    st.write("Your recommendations: ")
    st.write(recs['title'])
    def fetch_movielens(
        data_home=None,
        indicator_features=True,
        genre_features=False,
        min_rating=0.0,
        download_if_missing=True,
    ):

        if not (indicator_features or genre_features):
            raise ValueError(
                "At least one of item_indicator_features " "or genre_features must be True"
            )

        users = pd.read_csv('data/modified_users.csv')
        ratings = pd.read_csv('data/modified_ratings.csv')
        movies = pd.read_csv('data/modified_movies.csv')
        
        users = users['userId']
        movies = movies['movieId']

        user_ids = range(len(users))
        movie_ids = range(len(movies))

        user_to_id = dict(zip(users, user_ids))
        movie_to_id = dict(zip(movies, movie_ids))

        # get adjacency info
        num_user = users.shape[0]
        num_item = movies.shape[0]

        # initialize the adjacency matrix
        rat = np.zeros((num_user, num_item))

        for index, row in ratings.iterrows():
            user, movie, rating = row[:3]
            if num_user != -1:
                if user not in user_to_id: break
            # create ratings matrix where (i, j) entry represents the ratings
            # of movie j given by user i.
            rat[user_to_id[user], movie_to_id[movie]] = rating


        num_train_replaced = \
                round((0.2)*num_user*num_item)

        # edges masked during training
        indices_user = np.random.randint(0, num_user, num_train_replaced)
        indices_item = np.random.randint(0, num_item, num_train_replaced)

        train_mask = np.ones((num_user, num_item))
        train_mask[indices_user, indices_item] = 0

        test_mask = np.ones_like(train_mask)

        train = np.multiply(train_mask, rat)
        test = np.multiply(test_mask, rat)

        assert train.shape == test.shape

        features = []
        feature_labels = []
        id_feature_labels = []

        data = {
            "train": train,
            "test": test,
            "item_features": features,
            "item_feature_labels": feature_labels,
            "item_labels": id_feature_labels,
        }

        return data

    data = fetch_movielens(min_rating=3.0)

    for dataset in ["test", "train"]:
        data[dataset] = (data[dataset] > 0).astype("int8")

    user_item = data["train"]

    final_user_item = data["test"]

    import random
    def get_preds():
        new_content_embeddings = content_embeddings.copy()
        #calculating user embedding
        df_movies = pd.read_csv('data/modified_movies.csv')
        all_movies = list(df_movies['movieId'].unique())
        content_recs = []
        for user in range(200):
            user_embedding = [0.00000]*100
            for item in np.nonzero(user_item[user])[0]:
                user_embedding += content_embeddings.iloc[item]
            user_embedding /= user_item[user].sum().item()
            new_content_embeddings = new_content_embeddings.append(user_embedding, ignore_index=True)
            movie_recs = []
            for items in get_detailed_recs(4923+user, new_content_embeddings, 'temp.csv')[:10].index:
                movie_recs.append(items) 
            rem_movies = list(set(all_movies) - set(movie_recs)) 
            while(len(movie_recs) < 10):
                movie_recs.append(random.choice(rem_movies))
            content_recs.append(movie_recs)
        return content_recs

    number = st.number_input("Enter a user id", min_value=0, max_value=199, value=1, step=1)
    number = int(number)
    movs = pd.read_csv("data/modified_movies.csv")
    movtitle = []
    for i in content_recs[int(number)]:
        movtitle.append(movs[movs['movieId'] == i]['title'].values[0])

    st.write(movtitle)

    st.subheader("Evaluation metrics")

    st.write("Precision: 0.0215")
    st.write("Recall: 0.0018")
    st.write("Coverage: 3.41")
    st.write("Novelty: 6.7443")
    st.write("Personalization: 0.8434")
    st.write("Intra-list similarity: 0.1939")
    st.write("Serendipity: 1.1156")

if choice=="Clustering Model Recommendations":
    st.subheader("Clustering Model Recommendations")
    st.text("The data is clustered into 20 clusters based on tag information - the")
    st.text("clusters are overlapping since one tag can represent")
    st.text("multiple genres. The movies are then recommended based on the cluster.")
    st.text("Each user is modelled using the tags.")
    st.text("The user is then recommended movies from the cluster that the user is modelled in.")

    st.subheader("Clusters")
    st.image("assets/clusters.jpeg")

    clusters = pd.read_csv("data/Top15cluster.csv")
    st.table(pd.DataFrame(clusters, columns = ['Cluster 0', 'Cluster 1','Cluster 2','Cluster 3','Cluster 4','Cluster 5','Cluster 6','Cluster 7',
    'Cluster 8','Cluster 9','Cluster 10','Cluster 11','Cluster 12','Cluster 13','Cluster 14','Cluster 15','Cluster 16','Cluster 17','Cluster 18','Cluster 19']))

    st.subheader("Evaluation metrics")
    st.write("Precision: 0.0265")
    st.write("Recall: 0.0314")
    st.write("Coverage: 11.94")
    st.write("Novelty: 6.7804")
    st.write("Personalization: 0.9819")
    st.write("Intra-list similarity: 0.4709")
    st.write("Serendipity: 1.0972")

if choice=="Metrics Overall":
    st.header("Results")
    data = {'Model Name': ['Baseline MF', 'Hybrid SocialLGCN', 'NNCF Model', 'Content Based','Cluster Based','Hybrid-Weighted'],
            'Precision': [0.0724,0.1610,0.41300,0.0215,0.0265,0.1295],
            'Recall':[0.0085,0.0193,0.03297,0.00179,0.00314,0.0199],
            'Novelty':[4.2867,4.4584, 1.4334,6.7443,6.7804,4.6568],
            'Coverage':[10.91,19.03,0.69,3.41,11.94,13.47],
            'Serendipity':[ 1.2553,1.2340,1.13977,1.11556,1.097194,1.2530],
            'Intra List Similarity':[ 0.1868,0.2375,0.2351,0.1939,0.4709,0.1962],
            'Personalisation':[ 0.9789,0.9882,0.2228,0.8434,0.9819,0.8113]
    }
    st.table(pd.DataFrame(data, columns = ['Model Name', 'Precision', 'Recall', 'Novelty', 'Coverage', 'Serendipity', 'Intra List Similarity', 'Personalisation']))
